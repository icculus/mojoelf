#!/usr/bin/perl -w

# MojoELF; load ELF binaries from a memory buffer.
#
# Please see the file LICENSE.txt in the source's root directory.
#
#  This file written by Ryan C. Gordon.

use warnings;
use strict;

my $line;

my %tmap;
open TMAP, '<', 'gl.tm' or die("Failed to load gl.tm: $!\n");
$line = 0;
while (<TMAP>) {
    $line++;
    chomp;
    s/\t/ /g;     # Convert tabs to single space.
    s/  / /g;     # Convert multispace to single space.
    s/\A\s+//;    # strip leading whitespace.
    s/\#.*\Z//;   # strip comments.
    s/\s+\Z//;    # strip trailing whitespace.
    next if ($_ eq '');
    die("Unexpected problem on typemap line $line\n") if not /\A([a-zA-Z0-9_]*),\*,\*,\s*([a-zA-Z0-9_\s\*]*),\*,\*(,|)\Z/;
    my $spectype = $1;
    my $gltype = $2;
    $gltype = $spectype if ($gltype eq '*');
    $tmap{$spectype} = $gltype;
    #print("TMAP '$spectype' => '$gltype'\n");
}
close(TMAP);

open SPEC, '<', 'gl.spec' or die("Failed to load gl.spec: $!\n");

my $script = $0;
$script =~ s/\A.*\///;

print <<__EOF__
/**
 * MojoELF; load ELF binaries from a memory buffer.
 *
 * Please see the file LICENSE.txt in the source's root directory.
 *
 *  This file was autogenerated from $script. Do not edit by hand!
 */

// Do not #pragma once this file, it's intentionally included multiple times.

__EOF__
;

$line = 0;
while (<SPEC>) {
    $line++;
    chomp;
    s/\t/ /g;     # Convert tabs to single space.
    s/  / /g;     # Convert multispace to single space.
    s/\A\s+//;    # strip leading whitespace.
    s/\#.*\Z//;   # strip comments.
    s/\s+\Z//;    # strip trailing whitespace.
    next if not /([a-zA-Z0-9_]*)\s*\(([a-zA-Z0-9_\, ]*)\)\Z/;
    my $fn = $1;
    my $p = $2;
    #print "$fn ( $p )\n";
    my $rettype = undef;
    my $ret = undef;
    my $params = '';
    my $args = '';
    my $argcount = 0;
    while (<SPEC>) {
        $line++;
        chomp;
        s/\t/ /g;     # Convert tabs to single space.
        s/  / /g;     # Convert multispace to single space.
        s/\A\s+//;    # strip leading whitespace.
        s/\#.*\Z//;   # strip comments.
        s/\s+\Z//;    # strip trailing whitespace.
        last if $_ eq '';
        die("Unexpected problem on spec line $line\n") if not /\A([a-z]*)\s*(.*)\Z/;
        my $cmd = $1;
        my $details = $2;

        if ($cmd eq 'return') {
            $rettype = $tmap{$details};
            $ret = ($details eq 'void') ? '' : 'return';
        } elsif ($cmd eq 'param') {
            my @words = split /\s+/, $details;
            my $gltype = $tmap{$words[1]};
            my $isconst = ($words[2] eq 'in');
            my $isptr = (($words[3] eq 'array') or ($words[3] eq 'reference'));
            my $ptr = (($isptr) ? '*' : '');
            my $const = ((($isptr) and ($isconst)) ? 'const ' : '');

            if ($argcount) {
                $args .= ',';
                $params .= ',';
            }
            my $arg = chr(ord('a') + $argcount);
            $args .= $arg;
            $params .= "$const$gltype $ptr$arg";
            $argcount++;
        } elsif ($cmd eq 'profile') {
        } elsif ($cmd eq 'extension') {
        } elsif ($cmd eq 'glxvendorpriv') {
        } elsif ($cmd eq 'glfflags') {
        } elsif ($cmd eq 'beginend') {
        } elsif ($cmd eq 'deprecated') {
        } elsif ($cmd eq 'vectorequiv') {
        } elsif ($cmd eq 'glxvectorequiv') {
        } elsif ($cmd eq 'alias') {
        } elsif ($cmd eq 'subcategory') {
        } elsif ($cmd eq 'glextmask') {
        } elsif ($cmd eq 'category') {
        } elsif ($cmd eq 'version') {
        } elsif ($cmd eq 'dlflags') {
        } elsif ($cmd eq 'glxsingle') {
        } elsif ($cmd eq 'glxflags') {
        } elsif ($cmd eq 'glxropcode') {
        } elsif ($cmd eq 'wglflags') {
        } elsif ($cmd eq 'offset') {
        } else {
            die("Unexpected command '$cmd' on spec line $line.\n");
        }
    }

    $params = 'void' if $params eq '';
    print("MACTRAMPOLINE($rettype,gl$fn,($params),($args),$ret)\n");
}

close(SPEC);

print("\n// end of mactrampolines_openg.h ...\n\n");

# end of parseglspec.pl ...

